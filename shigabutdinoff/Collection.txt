// Object for working with collections
// by: shigabutdinoff

var Standard = new shigabutdinoff/Standard
var Helpers = new shigabutdinoff/Helpers
var EnumeratesValues = new shigabutdinoff/EnumeratesValues

// The items contained in the collection.
var items = []

// Create a collection from the given value.
func collect(items)
    var Collection = new shigabutdinoff/Collection
    Collection.items = EnumeratesValues.getArrayableItems(items)
    return Collection

// Create a collection with the given range.
func range(from, to)
    return collect(Standard.range(from, to))

// Get all of the items in the collection.
func all()
    return items

// TODO: LazyCollection

// Get the average value.
func avg()
    var collection = collect(items).filter() // TODO: Helpers.data_get()

    var count = collection.count()
    ? count
        return EnumeratesValues.sum(collection.all()) / count

// Get the median.
func median()
    var values = collect(items).filter().sort().values()

    var count = values.count()

    ? count = 0
        return null

    var middle = count / 2

    ? count % 2
        return middle

    return collect([values.get(middle - 1), values.get(middle)]).avg()

// Get the mode.
func mode()
    ? count() = 0
        return null

    var collection = unique()

    var counts = collect([])

    for each = 0 .. collection.count() - 1
        counts.items.Add(0)
    for item : items
        var position = collection.search(item)
        counts.put(position, counts.get(position) + 1)

    var sorted = collect([])

    var highestValue = counts.values().sort().last()

    for position = 0 .. collection.count() - 1
        ? counts.get(position) = highestValue
            sorted.put(null, collection.get(position))

    return sorted.all()

// Remove an item from the collection by key.
func forget(positions)
    ? !Standard.is_array(positions)
        positions = [positions]
    for position : positions
        offsetUnset(position)

    return collect(items)

// Get an item from the collection by key.
func get(position)
    ? Standard.array_key_exists(position, items)
        return items[position]

// Get the last item from the collection.
func last()
    return items[count() - 1]

// Put an item in the collection by key.
func put(position, value)
    offsetSet(position, value)
    return collect(items)

// Search the collection for a given value and return the corresponding key if successful.
func search(value)
    return Standard.array_search(value, items)

// Sort through each item with a callback.
func sort()
    return collect(items.Sort())

// Run a filter over each of the items.
func filter()
    return collect(Standard.array_filter(items))

// Return only unique items from the collection array.
func unique()
    return collect(Standard.array_unique(items)).sort()

// Reset the keys on the underlying array.
func values()
    return collect(Standard.array_values(items))

// Count the number of items in the collection.
func count()
    return items.Count()

// Set the item at a given offset.
func offsetSet(position, value)
    ? Standard.is_null(position)
        items.Add(value)
    :
        items.Emplace(position, value)

// Unset the item at a given offset.
func offsetUnset(position)
    items.RemoveAt(position)